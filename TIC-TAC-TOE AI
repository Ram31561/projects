import random

# Function to print the Tic-Tac-Toe board
def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 9)

# Function to check if a player has won
def check_win(board, player):
    for row in board:
        if all([cell == player for cell in row]):
            return True
    for col in range(3):
        if all([board[row][col] == player for row in range(3)]):
            return True
    if all([board[i][i] == player for i in range(3)]) or all([board[i][2 - i] == player for i in range(3)]):
        return True
    return False

# Function to check if the game is a draw
def check_draw(board):
    return all([cell != " " for row in board for cell in row])

# Function to evaluate the board for the Minimax algorithm
def evaluate_board(board):
    if check_win(board, "X"):
        return 1
    elif check_win(board, "O"):
        return -1
    else:
        return 0

# Minimax algorithm with Alpha-Beta Pruning
def minimax(board, depth, is_maximizing, alpha, beta):
    if check_win(board, "X"):
        return 1
    elif check_win(board, "O"):
        return -1
    elif check_draw(board):
        return 0

    if is_maximizing:
        max_eval = float("-inf")
        for row in range(3):
            for col in range(3):
                if board[row][col] == " ":
                    board[row][col] = "X"
                    eval = minimax(board, depth + 1, False, alpha, beta)
                    board[row][col] = " "
                    max_eval = max(max_eval, eval)
                    alpha = max(alpha, eval)
                    if beta <= alpha:
                        break
        return max_eval
    else:
        min_eval = float("inf")
        for row in range(3):
            for col in range(3):
                if board[row][col] == " ":
                    board[row][col] = "O"
                    eval = minimax(board, depth + 1, True, alpha, beta)
                    board[row][col] = " "
                    min_eval = min(min_eval, eval)
                    beta = min(beta, eval)
                    if beta <= alpha:
                        break
        return min_eval

# Function to make the AI move using Minimax
def ai_move(board):
    best_move = None
    best_eval = float("-inf")
    for row in range(3):
        for col in range(3):
            if board[row][col] == " ":
                board[row][col] = "X"
                eval = minimax(board, 0, False, float("-inf"), float("inf"))
                board[row][col] = " "
                if eval > best_eval:
                    best_eval = eval
                    best_move = (row, col)
    return best_move

# Main game loop
def play_tic_tac_toe():
    board = [[" " for _ in range(3)] for _ in range(3)]
    current_player = "O" if random.choice([True, False]) else "X"

    while True:
        print_board(board)
        if current_player == "O":
            row, col = map(int, input("Enter your move (row and column, e.g., 1 2): ").split())
        else:
            row, col = ai_move(board)
            print(f"AI moves to {row+1} {col+1}")

        if board[row][col] == " ":
            board[row][col] = current_player
            if check_win(board, current_player):
                print_board(board)
                if current_player == "X":
                    print("AI wins!")
                else:
                    print("You win!")
                break
            elif check_draw(board):
                print_board(board)
                print("It's a draw!")
                break
            current_player = "X" if current_player == "O" else "O"
        else:
            print("Invalid move. Try again.")

if __name__ == "__main__":
    play_tic_tac_toe()
